
export type LanguageLevel = "A0" | "A1" | "A2" | "B1" | "B2" | "C1" | "C2";

export const ALL_LEVELS: LanguageLevel[] = ["A0", "A1", "A2", "B1", "B2", "C1", "C2"];

export type ModuleType = "vocabulary" | "grammar" | "listening" | "reading" | "writing" | "wordTest";

export const ALL_MODULE_TYPES: ModuleType[] = ["vocabulary", "grammar", "listening", "reading", "writing", "wordTest"];
export const MODULE_NAMES_RU: Record<ModuleType, string> = {
  vocabulary: "Лексика",
  grammar: "Грамматика",
  listening: "Аудирование",
  reading: "Чтение",
  writing: "Письмо",
  wordTest: "Тест по словам"
};

export interface VocabularyWord {
  id: string;
  german: string;
  russian: string;
  topic: string;
  level: LanguageLevel;
  consecutiveCorrectAnswers: number;
  lastTestedDate?: string; // ISO date string
  errorCount: number;
  exampleSentence?: string; // Optional, can be generated by AI
}

export interface ModuleProgress {
  score: number | null; // Percentage
  completed: boolean;
  lastAttemptDate?: string; // ISO date string
  attempts: number;
}

export interface TopicProgress {
  id: string; // e.g., "greetings"
  name: string; // e.g., "Приветствия"
  modules: Partial<Record<ModuleType, ModuleProgress>>;
  completed: boolean;
  custom?: boolean; // True if user-defined topic
}

export interface LevelProgress {
  topics: Record<string, TopicProgress>; // Keyed by topic ID
  completed: boolean;
}

export interface UserProfile {
  name?: string;
  preferredTopics?: string[];
}

export interface UserSettings {
  notificationsEnabled: boolean;
  lastActivityTimestamp?: number; // Unix timestamp
  darkMode?: boolean;
}

export interface UserData {
  currentLevel: LanguageLevel;
  currentTopicId?: string; // ID of the current topic
  profile: UserProfile;
  progress: Partial<Record<LanguageLevel, LevelProgress>>;
  vocabularyBank: VocabularyWord[];
  settings: UserSettings;
  customTopics: TopicProgress[]; // For user-defined topics
}

// AI Generated Content Types (matches flows)
export interface AILessonContent {
  lessonTitle: string;
  vocabulary: string[]; // List of German words
  grammarExplanation: string;
  listeningExercise: string; // Description or script
  readingPassage: string;
  writingPrompt: string;
}

export interface AIEvaluationResult {
  evaluation: string;
  isCorrect: boolean;
  suggestedCorrection?: string;
}

export interface AIRecommendedLesson {
  topic: string;
  modules: string[]; // Module types
  reasoning: string;
}

// Default Topics (example, should be expanded)
export const DEFAULT_TOPICS: Record<LanguageLevel, { id: string; name: string }[]> = {
  A0: [
    { id: "alphabet", name: "Алфавит и звуки" },
    { id: "greetings", name: "Приветствия и прощания" },
    { id: "numbers", name: "Цифры и счет" },
  ],
  A1: [
    { id: "family", name: "Семья" },
    { id: "hobbies", name: "Хобби и свободное время" },
    { id: "food", name: "Еда и напитки" },
  ],
  A2: [
    { id: "travel", name: "Путешествия" },
    { id: "daily-routine", name: "Распорядок дня" },
    { id: "shopping", name: "Покупки" },
  ],
  B1: [
    { id: "work", name: "Работа и профессия" },
    { id: "health", name: "Здоровье и медицина" },
    { id: "education", name: "Образование" },
  ],
  B2: [
    { id: "environment", name: "Окружающая среда" },
    { id: "technology", name: "Технологии и интернет" },
    { id: "culture", name: "Культура и искусство" },
  ],
  C1: [
    { id: "politics", name: "Политика и общество" },
    { id: "science", name: "Наука и исследования" },
    { id: "literature", name: "Литература" },
  ],
  C2: [
    { id: "philosophy", name: "Философия и этика" },
    { id: "globalization", name: "Глобализация" },
    { id: "advanced-discussions", name: "Сложные дискуссии" },
  ],
};
