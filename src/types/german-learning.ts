
export type LanguageLevel = "A0" | "A1" | "A2" | "B1" | "B2" | "C1" | "C2";

export const ALL_LEVELS: LanguageLevel[] = ["A0", "A1", "A2", "B1", "B2", "C1", "C2"];

export type ModuleType = "vocabulary" | "grammar" | "listening" | "reading" | "writing" | "wordTest";

export const ALL_MODULE_TYPES: ModuleType[] = ["vocabulary", "grammar", "listening", "reading", "writing", "wordTest"];
export const MODULE_NAMES_RU: Record<ModuleType, string> = {
  vocabulary: "Лексика",
  grammar: "Грамматика",
  listening: "Аудирование",
  reading: "Чтение",
  writing: "Письмо",
  wordTest: "Тест по словам"
};

export interface VocabularyWord {
  id: string;
  german: string;
  russian: string;
  topic: string; // topicId
  level: LanguageLevel;
  consecutiveCorrectAnswers: number;
  lastTestedDate?: string; // ISO date string
  errorCount: number;
  exampleSentence?: string; // Optional, can be generated by AI
}

export interface ModuleProgress {
  score: number | null; // Percentage
  completed: boolean;
  lastAttemptDate?: string; // ISO date string
  attempts: number;
}

export interface TopicProgress {
  id: string; // e.g., "greetings"
  name: string; // e.g., "Приветствия"
  modules: Partial<Record<ModuleType, ModuleProgress>>;
  completed: boolean;
  custom?: boolean; // True if user-defined topic
}

export interface LevelProgress {
  topics: Record<string, TopicProgress>; // Keyed by topic ID
  completed: boolean;
}

export interface UserProfile {
  name?: string;
  preferredTopics?: string[];
}

export interface UserSettings {
  notificationsEnabled: boolean;
  lastActivityTimestamp?: number; // Unix timestamp
  darkMode?: boolean;
}

export interface GrammarWeaknessContext {
  level: LanguageLevel;
  topicId: string;
  topicName: string;
  moduleId?: ModuleType; 
}

export interface GrammarWeaknessDetail {
  tag: string; 
  count: number;
  lastEncounteredDate: string; 
  exampleContexts: GrammarWeaknessContext[]; 
}

export interface UserData {
  currentLevel: LanguageLevel;
  currentTopicId?: string; 
  profile: UserProfile;
  progress: Partial<Record<LanguageLevel, LevelProgress>>;
  vocabularyBank: VocabularyWord[];
  settings: UserSettings;
  customTopics: TopicProgress[]; 
  grammarWeaknesses?: Record<string, GrammarWeaknessDetail>; 
}

// --- AI Generated Content Types (matches flows) ---

export interface AILessonVocabularyItem {
  german: string;
  russian: string;
  exampleSentence?: string;
}

// --- Grammar Exercise Types ---
export interface AIFillInTheBlanksQuestion {
  promptText: string;
  correctAnswers: string[];
  explanation?: string;
}

export interface AIFillInTheBlanksExercise {
  type: "fillInTheBlanks";
  instructions: string;
  questions: AIFillInTheBlanksQuestion[];
}

export interface AIMultipleChoiceQuestion {
  questionText: string;
  options: string[];
  correctAnswer: string;
  explanation?: string;
}

export interface AIMultipleChoiceExercise {
  type: "multipleChoice";
  instructions: string;
  questions: AIMultipleChoiceQuestion[];
}

export interface AISentenceConstructionTask {
  words: string[];
  possibleCorrectSentences: string[];
  explanation?: string;
}

export interface AISentenceConstructionExercise {
  type: "sentenceConstruction";
  instructions: string;
  tasks: AISentenceConstructionTask[];
}

export type AIGrammarExercise = 
  | AIFillInTheBlanksExercise 
  | AIMultipleChoiceExercise 
  | AISentenceConstructionExercise;

// --- Standard Listening ---
export interface AILessonListeningExercise {
  script: string;
  questions: string[]; // Open-ended questions
}

// --- Interactive Vocabulary Exercise Types ---
export interface AIMatchingPair {
  german: string;
  russian: string;
}
export interface AIMatchingExercise {
  type: "matching";
  instructions: string;
  pairs: AIMatchingPair[];
  germanDistractors?: string[];
  russianDistractors?: string[];
}

export interface AIAudioQuizItem {
  germanPhraseToSpeak: string;
  options: string[]; // Russian translations
  correctAnswer: string; // One of the options
  explanation?: string;
}
export interface AIAudioQuizExercise {
  type: "audioQuiz";
  instructions: string;
  items: AIAudioQuizItem[];
}

export type AIVocabularyInteractiveExercise = 
  | AIMatchingExercise 
  | AIAudioQuizExercise;

// --- Common Interactive Exercise Types for Listening/Reading ---
export interface AIComprehensionMQ_Question { // Renamed to avoid conflict with AIMultipleChoiceQuestion
  questionText: string;
  options: string[];
  correctAnswer: string;
  explanation?: string;
}
export interface AIComprehensionMultipleChoiceExercise {
  type: "comprehensionMultipleChoice";
  instructions: string;
  questions: AIComprehensionMQ_Question[];
}

export interface AITrueFalseStatement {
  statement: string;
  isTrue: boolean;
  explanation?: string;
}
export interface AITrueFalseExercise {
  type: "trueFalse";
  instructions: string;
  statements: AITrueFalseStatement[];
}

export interface AISequencingExercise {
  type: "sequencing";
  instructions: string;
  shuffledItems: string[];
  correctOrder: string[];
}

// --- Interactive Listening Exercise Types ---
export type AIListeningInteractiveExercise =
  | AIComprehensionMultipleChoiceExercise
  | AITrueFalseExercise
  | AISequencingExercise;

// --- Interactive Reading Exercise Types ---
export type AIReadingInteractiveExercise =
  | AIComprehensionMultipleChoiceExercise
  | AITrueFalseExercise
  | AISequencingExercise;

// --- Interactive Writing Exercise Types ---
export interface AIStructuredWritingExercise {
  type: "structuredWriting";
  instructions: string;
  promptDetails: string;
  templateOutline?: string[];
  requiredVocabulary?: string[];
  aiGeneratedStoryToDescribe?: string;
}

export type AIWritingInteractiveExercise = AIStructuredWritingExercise;


// --- Main Lesson Content Structure ---
export interface AILessonContent {
  lessonTitle: string;
  vocabulary: AILessonVocabularyItem[];
  grammarExplanation: string;
  grammarExercises?: AIGrammarExercise[];
  listeningExercise: AILessonListeningExercise; // Contains script and open questions
  readingPassage: string;
  readingQuestions: string[]; // Open questions for reading passage
  writingPrompt: string; // General open writing prompt

  // New optional interactive exercises
  interactiveVocabularyExercises?: AIVocabularyInteractiveExercise[];
  interactiveListeningExercises?: AIListeningInteractiveExercise[]; // Based on listeningExercise.script
  interactiveReadingExercises?: AIReadingInteractiveExercise[];   // Based on readingPassage
  interactiveWritingExercises?: AIWritingInteractiveExercise[]; // Can augment or replace writingPrompt
}

export interface AIEvaluationResult {
  evaluation: string;
  isCorrect: boolean;
  suggestedCorrection?: string;
  grammarErrorTags?: string[]; 
}

export interface AIRecommendedLesson {
  topic: string;
  modules: string[]; 
  reasoning: string;
}

export interface DefaultTopicDefinition {
  id: string;
  name: string;
  fallbackVocabulary?: AILessonVocabularyItem[];
}

// Default Topics
export const DEFAULT_TOPICS: Record<LanguageLevel, DefaultTopicDefinition[]> = {
  A0: [
    { 
      id: "a0_greetings_farewells", name: "Основные приветствия и прощания",
      fallbackVocabulary: [
        { german: "Hallo", russian: "Привет", exampleSentence: "Hallo, wie geht's?" },
        { german: "Guten Morgen", russian: "Доброе утро", exampleSentence: "Guten Morgen, Herr Schmidt." },
        { german: "Guten Tag", russian: "Добрый день", exampleSentence: "Guten Tag, Frau Meier." },
        { german: "Guten Abend", russian: "Добрый вечер", exampleSentence: "Guten Abend zusammen." },
        { german: "Tschüss", russian: "Пока", exampleSentence: "Tschüss, bis bald!" },
        { german: "Auf Wiedersehen", russian: "До свидания", exampleSentence: "Auf Wiedersehen, meine Damen und Herren." },
        { german: "Bitte", russian: "Пожалуйста / Прошу", exampleSentence: "Kann ich bitte Wasser haben?" },
        { german: "Danke", russian: "Спасибо", exampleSentence: "Danke für Ihre Hilfe." },
        { german: "Ja", russian: "Да", exampleSentence: "Ja, das stimmt." },
        { german: "Nein", russian: "Нет", exampleSentence: "Nein, das ist nicht richtig." },
      ]
    },
    { 
      id: "a0_numbers_dates", name: "Числа и даты",
      fallbackVocabulary: [
        { german: "eins", russian: "один" }, { german: "zwei", russian: "два" }, { german: "drei", russian: "три" },
        { german: "vier", russian: "четыре" }, { german: "fünf", russian: "пять" },
        { german: "Montag", russian: "понедельник" }, { german: "Januar", russian: "январь" },
      ]
    },
    { id: "a0_family_friends", name: "Семья и друзья" },
    { id: "a0_colors", name: "Цвета" },
    { id: "a0_body_parts", name: "Части тела" },
    { id: "a0_home_objects", name: "Дом и предметы в доме" },
    { id: "a0_food_drinks", name: "Продукты питания и напитки" },
    { id: "a0_clothing", name: "Одежда" },
    { id: "a0_simple_motion_verbs", name: "Простые глаголы движения" },
    { id: "a0_simple_nouns_city_school", name: "Простые существительные (город, школа)" }
  ],
  A1: [
    { id: "a1_work_professions", name: "Работа и профессии" },
    { id: "a1_travel_transport", name: "Путешествия и транспорт" },
    { id: "a1_time_schedule", name: "Время и расписание" },
    { id: "a1_hobbies_interests", name: "Хобби и увлечения" },
    { id: "a1_shops_shopping", name: "Магазины и покупки" },
    { id: "a1_emotions_states", name: "Простые эмоции и состояния" },
    { id: "a1_simple_adjectives", name: "Простые прилагательные" }
  ],
  A2: [
    { id: "a2_health_medical_care", name: "Здоровье и медицинская помощь" },
    { id: "a2_weather_nature", name: "Погода и природа" },
    { id: "a2_education_studies", name: "Образование и учеба" },
    { id: "a2_relationships_family", name: "Отношения и семья (углубл.)" },
    { id: "a2_city_surroundings", name: "Город и окрестности" },
    { id: "a2_simple_phrasal_verbs", name: "Простые фразовые глаголы" }
  ],
  B1: [
    { id: "b1_work_career", name: "Работа и карьера" },
    { id: "b1_travel_culture", name: "Путешествия и культура" },
    { id: "b1_politics_society", name: "Политика и общество" },
    { id: "b1_technology", name: "Технологии" },
    { id: "b1_ecology_environment", name: "Экология и окружающая среда" },
    { id: "b1_holidays_traditions", name: "Праздники и традиции" }
  ],
  B2: [
    { id: "b2_science_technology", name: "Наука и техника" },
    { id: "b2_art_culture", name: "Искусство и культура" },
    { id: "b2_education_science", name: "Образование и наука" },
    { id: "b2_politics_economics", name: "Политика и экономика" },
    { id: "b2_social_issues", name: "Социальные проблемы" }
  ],
  C1: [
    { id: "c1_abstract_topics", name: "Абстрактные темы" },
    { id: "c1_professional_vocabulary", name: "Профессиональная лексика" },
    { id: "c1_discussion_topics", name: "Дискуссионные темы" },
    { id: "c1_philosophy_psychology", name: "Философия и психология" }
  ],
  C2: [
    { id: "c2_expert_terminology", name: "Экспертная терминология" },
    { id: "c2_rare_stylized_expressions", name: "Редкие и высоко стилизованные выражения" },
    { id: "c2_cultural_historical_references", name: "Культурные и исторические ссылки" }
  ],
};

